1.Git基础
1）直接记录快照，而非差异比较(Git更像是把数据看作是对小型文件系统的一组快照,对待数据更像是一个快照流)
2）近乎所有操作都是本地执行;
3）Git 保证完整性 （Git中所有数据在存储前都计算校验和，然后以校验和来引用；Git 用以计算校验和的机制叫做 SHA-1 散列[hash，哈希]）
4）Git 一般只添加数据

git clone https://github.com/libgit2/libgit2
git clone https://github.com/libgit2/libgit2 mylibgit

git status
git add 
可以用它开始跟踪新文件，或把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等；【添加内容到下一次提交中】

git status --short / -s
[新添加的未跟踪文件前面有 ?? 标记 / 新添加到暂存区中的文件前面有 A 标记 / 
修改过的文件前面有 M标记:右-M 表示该文件被修改了但是还没放入暂存区，左-M 表示该文件被修改了并放入了暂存区]

忽略文件
[GitHub 针对数十种项目及语言的 .gitignore 文件列表，参考 https://github.com/github/gitignore]

git diff --cached / --staged	

git difftool 命令来用 Araxis ，emerge 或 vimdiff 等软件输出 diff 分析结果;
使用 git difftool --tool-help 命令来看你的系统支持哪些 Git Diff 插件;

跳过使用暂存区域
git commit 加上 -a 选项

想让文件保留在磁盘，但是并不想让 Git 继续跟踪
git rm --cached FileName

移动文件
git mv file_from file_to

查看提交历史
git log

-p：用来显示每次提交的内容差异,加上 -2 来仅显示最近两次提交;
git log -p -2

想看到每次提交的简略的统计信息，可以使用 --stat 选项
git log --stat

另一个常用的选项是 --pretty，该选项可以指定使用不同于默认格式的方式展示提交历史，最有意思的是 format，可以定制要显示的记录格式
git log --pretty=oneline
git log --pretty=format:"%h - %an, %ar : %s"
git log -Sfunction_name

提交命令尝试重新提交
git commit --amend

来取消暂存
git reset HEAD CONTRIBUTING.md

查看远程仓库
git remote
git remote show [remote-name]

指定选项 -v，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL
git remote -v

添加远程仓库
git remote add <shortname> <url>
e.g: git remote add pb https://github.com/paulboone/ticgit

从远程仓库中抓取与拉取
git fetch [remote-name]
git pull 自动的抓取然后合并远程分支到当前分支

推送到远程仓库
git push [remote-name] [branch-name]

远程仓库的移除与重命名
git remote rename
git remote rm

Git可以给历史中的某一个提交打上标签，以示重要；
列举标签
git tag
git tag -l 'v1.8.5*'

创建标签(附注标签)
git tag -a v1.4 -m 'my version 1.4'

查看标签信息与对应的提交信息
git show v1.4	

创建轻量标签
git tag v1.4-lw

共享标签
默认情况下，git push命令并不会传送标签到远程仓库服务器上；
git push origin [tagname]

Git别名
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.unstage 'reset HEAD --'
git config --global alias.last 'log -1 HEAD'

要执行外部命令，可以在外部命令之前加入！符号
e.g: git config --global alias.visual '!gitk'

git log --oneline --decorate

创建/切换分支
git branch branch-name
git checkout branch_name

合并分支
git checkout master
git merge branch-name

删除分支
git branch -d branch-name

git branch 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表；
如果需要查看每一个分支的最后一次提交，可以运行 git branch -v 命令；
--merged 与 --no-merged 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支[git branch --merged ]


远程引用是对远程仓库的引用（指针），包括分支、标签等等；
git ls-remote (remote) 显式地获得远程引用的完整列表，或通过 git remote show (remote) 获得远程分支的更多信息。

跟踪分支是与远程分支有直接关系的本地分支；
如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支；
运行 git checkout -b [branch] [remotename]/[branch]

git fetch --all; git branch -vv

git config --global credential.helper cache

拉取
git fetch 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并；
git pull 在大多数情况下它的含义是一个 git fetch紧接着一个 git merge 命令；

可以使用 rebase 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样
1) git checkout branch-name;
2) git rebase branch-name;
3) git checkout master;
4) git merge branch-name;

变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起;

1)git rebase --onto master server client
“取出 client 分支，找出处于 client 分支和 server 分支的共同祖先之后的修改，然后把它们在 master 分支上重演一遍”;
2)git checkout master;
3)git merge client;

a)使用 git rebase [basebranch] [topicbranch] 命令可以直接将特性分支变基到目标分支上;
b)然后就可以快进合并主分支 master 了;

总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作，